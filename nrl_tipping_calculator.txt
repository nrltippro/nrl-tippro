<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NRL TipPro - Your Ultimate NRL Tipping Companion</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <style>
        .weather-icon {
            font-size: 1.5rem;
        }
        .betting-odds {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .live-indicator {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .accumulator-card {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }
        .winning-tip {
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            color: white;
        }
        .losing-tip {
            background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
            color: white;
        }
        .tied-tip {
            background: linear-gradient(135deg, #ff9800 0%, #f57f17 100%);
            color: white;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;
        const { Share2, Trophy, Calendar, Users, TrendingUp, Share, Copy, CheckCircle, XCircle, Minus } = lucide;

        function NRLTippingCalculator() {
            const [currentRound, setCurrentRound] = useState(19);
            const [selectedTips, setSelectedTips] = useState({});
            const [accumulator, setAccumulator] = useState([]);
            const [accumulatorStake, setAccumulatorStake] = useState(10);
            const [liveScores, setLiveScores] = useState({});
            const [shareMessage, setShareMessage] = useState('');

            // Mock live scores that update
            useEffect(() => {
                const interval = setInterval(() => {
                    setLiveScores(prev => {
                        const newScores = { ...prev };
                        // Update some random scores
                        const liveGames = [1, 3, 5];
                        liveGames.forEach(gameId => {
                            if (Math.random() > 0.7) {
                                newScores[gameId] = {
                                    home: Math.floor(Math.random() * 30),
                                    away: Math.floor(Math.random() * 30),
                                    minute: Math.floor(Math.random() * 80) + 1,
                                    status: 'live'
                                };
                            }
                        });
                        return newScores;
                    });
                }, 5000);

                return () => clearInterval(interval);
            }, []);

            const teams = [
                { id: 1, name: "Melbourne Storm", logo: "⚡", color: "bg-purple-600" },
                { id: 2, name: "Canberra Raiders", logo: "🐸", color: "bg-green-600" },
                { id: 3, name: "Sydney Roosters", logo: "🐓", color: "bg-red-600" },
                { id: 4, name: "South Sydney Rabbitohs", logo: "🐰", color: "bg-red-800" },
                { id: 5, name: "Penrith Panthers", logo: "🐆", color: "bg-black" },
                { id: 6, name: "Brisbane Broncos", logo: "🐴", color: "bg-yellow-600" },
                { id: 7, name: "Gold Coast Titans", logo: "⚡", color: "bg-blue-400" },
                { id: 8, name: "Cronulla Sharks", logo: "🦈", color: "bg-blue-600" },
                { id: 9, name: "Newcastle Knights", logo: "⚔️", color: "bg-red-700" },
                { id: 10, name: "Parramatta Eels", logo: "🐍", color: "bg-yellow-500" },
                { id: 11, name: "Manly Sea Eagles", logo: "🦅", color: "bg-red-600" },
                { id: 12, name: "St George Illawarra Dragons", logo: "🐉", color: "bg-red-600" },
                { id: 13, name: "Wests Tigers", logo: "🐅", color: "bg-orange-600" },
                { id: 14, name: "Canterbury Bulldogs", logo: "🐕", color: "bg-blue-700" },
                { id: 15, name: "North Queensland Cowboys", logo: "🤠", color: "bg-blue-800" },
                { id: 16, name: "Dolphins", logo: "🐬", color: "bg-cyan-500" },
                { id: 17, name: "Warriors", logo: "⚔️", color: "bg-green-700" }
            ];

            const games = [
                {
                    id: 1,
                    homeTeam: teams[0],
                    awayTeam: teams[1],
                    date: "2024-07-13",
                    time: "19:50",
                    venue: "AAMI Park",
                    weather: { temp: 12, condition: "🌧️", wind: "SW 15km/h" },
                    odds: { home: 1.65, away: 2.20 },
                    status: "live",
                    commentary: "Storm leading 18-12 at halftime. Munster with 2 try assists.",
                    playerStats: {
                        topScorer: "Cameron Munster - 2 tries, 3 goals",
                        topTackler: "Harry Grant - 15 tackles"
                    }
                },
                {
                    id: 2,
                    homeTeam: teams[2],
                    awayTeam: teams[3],
                    date: "2024-07-14",
                    time: "15:00",
                    venue: "Allianz Stadium",
                    weather: { temp: 18, condition: "☀️", wind: "E 8km/h" },
                    odds: { home: 1.85, away: 1.95 },
                    status: "upcoming"
                },
                {
                    id: 3,
                    homeTeam: teams[4],
                    awayTeam: teams[5],
                    date: "2024-07-14",
                    time: "17:30",
                    venue: "BlueBet Stadium",
                    weather: { temp: 16, condition: "⛅", wind: "NW 12km/h" },
                    odds: { home: 1.45, away: 2.65 },
                    status: "live",
                    commentary: "Panthers dominating with 24-6 lead. Cleary with masterclass performance.",
                    playerStats: {
                        topScorer: "Nathan Cleary - 1 try, 4 goals",
                        topTackler: "Isaah Yeo - 18 tackles"
                    }
                },
                {
                    id: 4,
                    homeTeam: teams[6],
                    awayTeam: teams[7],
                    date: "2024-07-14",
                    time: "19:35",
                    venue: "Suncorp Stadium",
                    weather: { temp: 22, condition: "🌙", wind: "Calm" },
                    odds: { home: 1.75, away: 2.05 },
                    status: "upcoming"
                },
                {
                    id: 5,
                    homeTeam: teams[8],
                    awayTeam: teams[9],
                    date: "2024-07-15",
                    time: "14:00",
                    venue: "McDonald Jones Stadium",
                    weather: { temp: 14, condition: "🌧️", wind: "S 20km/h" },
                    odds: { home: 2.10, away: 1.70 },
                    status: "live",
                    commentary: "Tight contest at 14-10 to Knights. Ponga showing his class.",
                    playerStats: {
                        topScorer: "Kalyn Ponga - 1 try, 3 goals",
                        topTackler: "Tyson Frizell - 12 tackles"
                    }
                },
                {
                    id: 6,
                    homeTeam: teams[10],
                    awayTeam: teams[11],
                    date: "2024-07-15",
                    time: "16:00",
                    venue: "CommBank Stadium",
                    weather: { temp: 17, condition: "☀️", wind: "NE 5km/h" },
                    odds: { home: 1.90, away: 1.90 },
                    status: "upcoming"
                },
                {
                    id: 7,
                    homeTeam: teams[12],
                    awayTeam: teams[13],
                    date: "2024-07-15",
                    time: "18:30",
                    venue: "Accor Stadium",
                    weather: { temp: 15, condition: "⛅", wind: "W 10km/h" },
                    odds: { home: 2.25, away: 1.60 },
                    status: "upcoming"
                },
                {
                    id: 8,
                    homeTeam: teams[14],
                    awayTeam: teams[15],
                    date: "2024-07-16",
                    time: "20:00",
                    venue: "1300SMILES Stadium",
                    weather: { temp: 25, condition: "🌙", wind: "SE 8km/h" },
                    odds: { home: 1.55, away: 2.40 },
                    status: "upcoming"
                }
            ];

            const handleTip = (gameId, team) => {
                setSelectedTips(prev => ({
                    ...prev,
                    [gameId]: team
                }));
            };

            const addToAccumulator = (gameId, team, odds) => {
                const existingIndex = accumulator.findIndex(bet => bet.gameId === gameId);
                if (existingIndex >= 0) {
                    const newAccumulator = [...accumulator];
                    newAccumulator[existingIndex] = { gameId, team, odds };
                    setAccumulator(newAccumulator);
                } else {
                    setAccumulator(prev => [...prev, { gameId, team, odds }]);
                }
            };

            const removeFromAccumulator = (gameId) => {
                setAccumulator(prev => prev.filter(bet => bet.gameId !== gameId));
            };

            const calculateAccumulatorOdds = () => {
                return accumulator.reduce((total, bet) => total * bet.odds, 1);
            };

            const calculatePotentialWin = () => {
                return (accumulatorStake * calculateAccumulatorOdds()).toFixed(2);
            };

            const getTipStatus = (gameId) => {
                const score = liveScores[gameId];
                const tip = selectedTips[gameId];
                
                if (!score || !tip) return null;
                
                const homeScore = score.home;
                const awayScore = score.away;
                
                if (homeScore > awayScore && tip.id === games.find(g => g.id === gameId)?.homeTeam.id) {
                    return 'winning';
                } else if (awayScore > homeScore && tip.id === games.find(g => g.id === gameId)?.awayTeam.id) {
                    return 'winning';
                } else if (homeScore === awayScore) {
                    return 'tied';
                } else {
                    return 'losing';
                }
            };

            const getStatusIcon = (status) => {
                switch (status) {
                    case 'winning': return <CheckCircle className="w-4 h-4 text-green-500" />;
                    case 'losing': return <XCircle className="w-4 h-4 text-red-500" />;
                    case 'tied': return <Minus className="w-4 h-4 text-orange-500" />;
                    default: return null;
                }
            };

            const shareMyTips = () => {
                const tipsText = games.map(game => {
                    const tip = selectedTips[game.id];
                    if (!tip) return null;
                    
                    const status = getTipStatus(game.id);
                    const statusEmoji = status === 'winning' ? '✅' : status === 'losing' ? '❌' : status === 'tied' ? '⚖️' : '🎯';
                    
                    return `${statusEmoji} ${tip.name} vs ${game.homeTeam.id === tip.id ? game.awayTeam.name : game.homeTeam.name}`;
                }).filter(Boolean);

                const message = `🏉 My NRL TipPro Round ${currentRound} Tips:\n\n${tipsText.join('\n')}\n\n#NRLTipPro #NRL`;
                
                navigator.clipboard.writeText(message);
                setShareMessage('Tips copied to clipboard!');
                setTimeout(() => setShareMessage(''), 3000);
            };

            const shareLiveScore = (game) => {
                const score = liveScores[game.id];
                const tip = selectedTips[game.id];
                
                if (!score) return;
                
                const homeScore = score.home;
                const awayScore = score.away;
                const leader = homeScore > awayScore ? game.homeTeam.name : awayScore > homeScore ? game.awayTeam.name : 'Tied';
                const margin = Math.abs(homeScore - awayScore);
                
                const tipStatus = getTipStatus(game.id);
                const tipEmoji = tipStatus === 'winning' ? '✅' : tipStatus === 'losing' ? '❌' : tipStatus === 'tied' ? '⚖️' : '';
                
                const message = `🏉 LIVE: ${game.homeTeam.name} ${homeScore} - ${awayScore} ${game.awayTeam.name}
${leader !== 'Tied' ? `${leader} leading by ${margin}` : 'All tied up!'}
⏱️ ${score.minute} minutes
${tip ? `${tipEmoji} I tipped: ${tip.name}` : ''}

#NRLTipPro #NRL #LiveScores`;
                
                navigator.clipboard.writeText(message);
                setShareMessage('Live score copied to clipboard!');
                setTimeout(() => setShareMessage(''), 3000);
            };

            return (
                <div className="min-h-screen bg-gray-50 py-8">
                    <div className="max-w-7xl mx-auto px-4">
                        <div className="text-center mb-8">
                            <h1 className="text-4xl font-bold text-blue-600 mb-2">NRL TipPro</h1>
                            <p className="text-gray-600">Your Ultimate NRL Tipping Companion - Round {currentRound}</p>
                        </div>

                        <div className="flex flex-wrap justify-center gap-4 mb-8">
                            <div className="flex items-center gap-2 bg-white px-4 py-2 rounded-lg shadow">
                                <Calendar className="w-5 h-5 text-blue-500" />
                                <span className="font-semibold">Round {currentRound}</span>
                            </div>
                            <div className="flex items-center gap-2 bg-white px-4 py-2 rounded-lg shadow">
                                <Trophy className="w-5 h-5 text-yellow-500" />
                                <span>{Object.keys(selectedTips).length} Tips Made</span>
                            </div>
                            <div className="flex items-center gap-2 bg-white px-4 py-2 rounded-lg shadow">
                                <Users className="w-5 h-5 text-green-500" />
                                <span>{accumulator.length} Accumulator Bets</span>
                            </div>
                            <button
                                onClick={shareMyTips}
                                className="flex items-center gap-2 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
                            >
                                <Share2 className="w-5 h-5" />
                                Share My Tips
                            </button>
                        </div>

                        {shareMessage && (
                            <div className="text-center mb-4">
                                <span className="bg-green-100 text-green-800 px-4 py-2 rounded-lg">{shareMessage}</span>
                            </div>
                        )}

                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                            <div className="lg:col-span-2">
                                <div className="grid gap-6">
                                    {games.map(game => {
                                        const score = liveScores[game.id];
                                        const tip = selectedTips[game.id];
                                        const tipStatus = getTipStatus(game.id);
                                        
                                        return (
                                            <div key={game.id} className={`bg-white rounded-lg shadow-lg p-6 ${tipStatus === 'winning' ? 'ring-2 ring-green-500' : tipStatus === 'losing' ? 'ring-2 ring-red-500' : tipStatus === 'tied' ? 'ring-2 ring-orange-500' : ''}`}>
                                                <div className="flex justify-between items-start mb-4">
                                                    <div className="flex items-center gap-2">
                                                        {game.status === 'live' && (
                                                            <span className="live-indicator bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold">
                                                                LIVE
                                                            </span>
                                                        )}
                                                        <span className="text-gray-600">{game.date} • {game.time}</span>
                                                        <span className="text-gray-600">• {game.venue}</span>
                                                    </div>
                                                    {tip && getStatusIcon(tipStatus)}
                                                </div>

                                                {score && (
                                                    <div className="mb-4 p-4 bg-gray-50 rounded-lg">
                                                        <div className="flex justify-between items-center mb-2">
                                                            <h3 className="font-bold text-lg">Live Score</h3>
                                                            <button
                                                                onClick={() => shareLiveScore(game)}
                                                                className="flex items-center gap-1 text-blue-500 hover:text-blue-600 text-sm"
                                                            >
                                                                <Share className="w-4 h-4" />
                                                                Share Live Score
                                                            </button>
                                                        </div>
                                                        <div className="text-2xl font-bold text-center">
                                                            {game.homeTeam.name} {score.home} - {score.away} {game.awayTeam.name}
                                                        </div>
                                                        <div className="text-center text-gray-600 mt-2">
                                                            {score.minute} minutes • {score.status}
                                                        </div>
                                                    </div>
                                                )}

                                                <div className="grid grid-cols-2 gap-4 mb-4">
                                                    <button
                                                        onClick={() => handleTip(game.id, game.homeTeam)}
                                                        className={`p-4 rounded-lg border-2 transition-all ${
                                                            selectedTips[game.id]?.id === game.homeTeam.id
                                                                ? tipStatus === 'winning' 
                                                                    ? 'winning-tip border-green-500'
                                                                    : tipStatus === 'losing'
                                                                    ? 'losing-tip border-red-500'
                                                                    : tipStatus === 'tied'
                                                                    ? 'tied-tip border-orange-500'
                                                                    : 'bg-blue-500 text-white border-blue-500'
                                                                : 'border-gray-300 hover:border-blue-500'
                                                        }`}
                                                    >
                                                        <div className="flex items-center justify-center gap-2">
                                                            <span className="text-2xl">{game.homeTeam.logo}</span>
                                                            <span className="font-semibold">{game.homeTeam.name}</span>
                                                        </div>
                                                        <div className="text-sm mt-2">
                                                            Odds: ${game.odds.home.toFixed(2)}
                                                        </div>
                                                    </button>

                                                    <button
                                                        onClick={() => handleTip(game.id, game.awayTeam)}
                                                        className={`p-4 rounded-lg border-2 transition-all ${
                                                            selectedTips[game.id]?.id === game.awayTeam.id
                                                                ? tipStatus === 'winning' 
                                                                    ? 'winning-tip border-green-500'
                                                                    : tipStatus === 'losing'
                                                                    ? 'losing-tip border-red-500'
                                                                    : tipStatus === 'tied'
                                                                    ? 'tied-tip border-orange-500'
                                                                    : 'bg-blue-500 text-white border-blue-500'
                                                                : 'border-gray-300 hover:border-blue-500'
                                                        }`}
                                                    >
                                                        <div className="flex items-center justify-center gap-2">
                                                            <span className="text-2xl">{game.awayTeam.logo}</span>
                                                            <span className="font-semibold">{game.awayTeam.name}</span>
                                                        </div>
                                                        <div className="text-sm mt-2">
                                                            Odds: ${game.odds.away.toFixed(2)}
                                                        </div>
                                                    </button>
                                                </div>

                                                <div className="grid grid-cols-2 gap-4 mb-4">
                                                    <div className="bg-blue-50 p-3 rounded-lg">
                                                        <h4 className="font-semibold text-blue-800 mb-1">Weather</h4>
                                                        <div className="text-sm text-blue-600">
                                                            {game.weather.condition} {game.weather.temp}°C
                                                        </div>
                                                        <div className="text-xs text-blue-500">{game.weather.wind}</div>
                                                    </div>
                                                    <div className="betting-odds p-3 rounded-lg text-white">
                                                        <h4 className="font-semibold mb-1">Betting Odds</h4>
                                                        <div className="text-sm">
                                                            Home: ${game.odds.home.toFixed(2)} | Away: ${game.odds.away.toFixed(2)}
                                                        </div>
                                                    </div>
                                                </div>

                                                {(game.commentary || game.playerStats) && (
                                                    <div className="bg-gray-50 p-3 rounded-lg">
                                                        {game.commentary && (
                                                            <div className="mb-2">
                                                                <h4 className="font-semibold text-gray-800">Commentary</h4>
                                                                <p className="text-sm text-gray-600">{game.commentary}</p>
                                                            </div>
                                                        )}
                                                        {game.playerStats && (
                                                            <div className="grid grid-cols-2 gap-2 text-xs">
                                                                <div>
                                                                    <span className="font-semibold">Top Scorer:</span>
                                                                    <br />
                                                                    {game.playerStats.topScorer}
                                                                </div>
                                                                <div>
                                                                    <span className="font-semibold">Top Tackler:</span>
                                                                    <br />
                                                                    {game.playerStats.topTackler}
                                                                </div>
                                                            </div>
                                                        )}
                                                    </div>
                                                )}

                                                <div className="flex gap-2 mt-4">
                                                    <button
                                                        onClick={() => addToAccumulator(game.id, game.homeTeam, game.odds.home)}
                                                        className="flex-1 bg-green-500 text-white px-3 py-2 rounded text-sm hover:bg-green-600 transition-colors"
                                                    >
                                                        Add Home to Accumulator
                                                    </button>
                                                    <button
                                                        onClick={() => addToAccumulator(game.id, game.awayTeam, game.odds.away)}
                                                        className="flex-1 bg-green-500 text-white px-3 py-2 rounded text-sm hover:bg-green-600 transition-colors"
                                                    >
                                                        Add Away to Accumulator
                                                    </button>
                                                </div>
                                            </div>
                                        );
                                    })}
                                </div>
                            </div>

                            <div>
                                <div className="accumulator-card rounded-lg p-6 text-white mb-6">
                                    <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                                        <TrendingUp className="w-5 h-5" />
                                        Accumulator Bet
                                    </h3>
                                    
                                    <div className="space-y-3">
                                        {accumulator.map(bet => {
                                            const game = games.find(g => g.id === bet.gameId);
                                            return (
                                                <div key={bet.gameId} className="bg-white/20 p-3 rounded-lg">
                                                    <div className="flex justify-between items-start">
                                                        <div>
                                                            <div className="font-semibold">{bet.team.name}</div>
                                                            <div className="text-sm opacity-90">
                                                                vs {game?.homeTeam.id === bet.team.id ? game?.awayTeam.name : game?.homeTeam.name}
                                                            </div>
                                                            <div className="text-sm">Odds: ${bet.odds.toFixed(2)}</div>
                                                        </div>
                                                        <button
                                                            onClick={() => removeFromAccumulator(bet.gameId)}
                                                            className="text-white/70 hover:text-white text-sm"
                                                        >
                                                            Remove
                                                        </button>
                                                    </div>
                                                </div>
                                            );
                                        })}
                                    </div>

                                    {accumulator.length > 0 && (
                                        <div className="mt-4 pt-4 border-t border-white/20">
                                            <div className="flex justify-between items-center mb-2">
                                                <span>Stake:</span>
                                                <div className="flex items-center gap-2">
                                                    <span>$</span>
                                                    <input
                                                        type="number"
                                                        value={accumulatorStake}
                                                        onChange={(e) => setAccumulatorStake(Number(e.target.value))}
                                                        className="w-20 px-2 py-1 rounded text-black"
                                                        min="1"
                                                    />
                                                </div>
                                            </div>
                                            <div className="flex justify-between items-center mb-2">
                                                <span>Total Odds:</span>
                                                <span className="font-bold">${calculateAccumulatorOdds().toFixed(2)}</span>
                                            </div>
                                            <div className="flex justify-between items-center">
                                                <span>Potential Win:</span>
                                                <span className="font-bold text-lg">${calculatePotentialWin()}</span>
                                            </div>
                                        </div>
                                    )}

                                    {accumulator.length === 0 && (
                                        <div className="text-center py-8 text-white/70">
                                            <p>Add games to your accumulator bet for bigger potential wins!</p>
                                        </div>
                                    )}
                                </div>

                                <div className="bg-white rounded-lg p-6 shadow-lg">
                                    <h3 className="text-xl font-bold mb-4 text-gray-800">Your Tips Summary</h3>
                                    <div className="space-y-3">
                                        {Object.entries(selectedTips).map(([gameId, team]) => {
                                            const game = games.fin
