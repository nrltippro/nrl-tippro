<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NRL TipPro - Your Ultimate NRL Tipping Companion</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <style>
        .weather-icon { font-size: 1.5rem; }
        .betting-odds { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .live-indicator { animation: pulse 2s infinite; }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
        .accumulator-card { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
        .winning-tip { background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); color: white; }
        .losing-tip { background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%); color: white; }
        .tied-tip { background: linear-gradient(135deg, #ff9800 0%, #f57f17 100%); color: white; }
    </style>
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
        const { useState, useEffect } = React;
        const { Share2, Trophy, Calendar, Users, TrendingUp, Share, Copy, CheckCircle, XCircle, Minus } = lucide;

        function NRLTippingCalculator() {
            const [currentRound, setCurrentRound] = useState(19);
            const [selectedTips, setSelectedTips] = useState({});
            const [accumulator, setAccumulator] = useState([]);
            const [accumulatorStake, setAccumulatorStake] = useState(10);
            const [liveScores, setLiveScores] = useState({});
            const [shareMessage, setShareMessage] = useState('');

            useEffect(() => {
                const interval = setInterval(() => {
                    setLiveScores(prev => {
                        const newScores = { ...prev };
                        const liveGames = [1, 3, 5];
                        liveGames.forEach(gameId => {
                            if (Math.random() > 0.7) {
                                newScores[gameId] = {
                                    home: Math.floor(Math.random() * 30),
                                    away: Math.floor(Math.random() * 30),
                                    minute: Math.floor(Math.random() * 80) + 1,
                                    status: 'live'
                                };
                            }
                        });
                        return newScores;
                    });
                }, 5000);

                return () => clearInterval(interval);
            }, []);

            const teams = [ ... ]; // Your teams array as previously

            const games = [ ... ]; // Define your games array here

            const addToAccumulator = (gameId, team, odds) => { ... };

            const removeFromAccumulator = (gameId) => { ... };

            const calculateAccumulatorOdds = () => { ... };

            const calculatePotentialWin = () => { ... };

            const getTipStatus = (gameId) => { ... };

            const getStatusIcon = (status) => { ... };

            const shareMyTips = () => {
                const tipsText = games.map(game => {
                    const tip = selectedTips[game.id];
                    if (!tip) return null;
                    const status = getTipStatus(game.id);
                    const statusEmoji = status === 'winning' ? '‚úÖ' : status === 'losing' ? '‚ùå' : status === 'tied' ? '‚öñÔ∏è' : 'üéØ';
                    return `${statusEmoji} ${tip.name} vs ${game.homeTeam.id === tip.id ? game.awayTeam.name : game.homeTeam.name}`;
                }).filter(Boolean);

                const message = `üèâ My NRL TipPro Round ${currentRound} Tips:\n\n${tipsText.join('\n')}\n\n#NRLTipPro #NRL`;
                
                navigator.clipboard.writeText(message);
                setShareMessage('Tips copied to clipboard!');
                setTimeout(() => setShareMessage(''), 3000);
            };

            const twitterShare = () => {
                const message = `üèâ My NRL TipPro Round ${currentRound} Tips:\n\n${tipsText.join('\n')}\n\n#NRLTipPro #NRL`;
                window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(message)}`, "_blank");
            };

            const facebookShare = () => {
                const message = `üèâ My NRL TipPro Round ${currentRound} Tips:\n\n${tipsText.join('\n')}\n\n#NRLTipPro #NRL`;
                window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(message)}`, "_blank");
            };

            return (
                <div>
                    <h1>NRL TipPro</h1>
                    <div>
                        <h2>Your Accumulator</h2>
                        <div className="flex items-center gap-2">
                            <span>$</span>
                            <input
                                type="number"
                                value={accumulatorStake}
                                onChange={(e) => setAccumulatorStake(Number(e.target.value))}
                                className="w-20 px-2 py-1 rounded text-black"
                                min="1"
                            />
                        </div>
                        <div>
                            <span>Total Odds: </span><span>{calculateAccumulatorOdds().toFixed(2)}</span>
                            <div>
                                <span>Potential Win: </span><span>${calculatePotentialWin()}</span>
                            </div>
                        </div>
                        {accumulator.length === 0 && (
                            <div>Add games to your accumulator for bigger potential wins!</div>
                        )}
                    </div>

                    <div>
                        <h3>Your Tips Summary</h3>
                        {Object.entries(selectedTips).map(([gameId, teamId]) => {
                            const game = games.find(g => g.id === parseInt(gameId));
                            const team = teams.find(t => t.id === teamId);
                            return (
                                <div key={gameId}>
                                    <span>{game.homeTeam.name} vs {game.awayTeam.name}</span>
                                    <span>{team.name}</span>
                                    {getStatusIcon(getTipStatus(gameId))}
                                </div>
                            );
                        })}
                    </div>

                    <div>
                        <button onClick={shareMyTips}>Copy Tips to Clipboard</button>
                        <button onClick={twitterShare}>Share on Twitter</button>
                        <button onClick={facebookShare}>Share on Facebook</button>
                    </div>

                    {shareMessage && <div>{shareMessage}</div>}
                </div>
            );
        }

        ReactDOM.createRoot(document.getElementById('root')).render(<NRLTippingCalculator />);
    </script>
</body>
</html>
